#!/usr/bin/env python3

"""Listen to kernel input events and translate to Mopidy commands.

"""

import argparse
import asyncio
import contextlib
from enum import IntEnum
import logging
import random
from typing import (Any, Awaitable, Callable, List, Dict, NamedTuple,
                    Optional, Tuple)

import aiohttp
from evdev import InputDevice, categorize, ecodes

MOPIDY_URL = "http://localhost:6680/mopidy/rpc"

LOGGER = logging.getLogger("argosir")

DEFAULT_DEVICE = "/dev/input/ir-recv"

VOLUME_STEP = 5

FAVORITE_PLAYLIST_NAME = "Radio France ðŸ“»"

KEY_TO_SKIP = None


class KeyDirection(IntEnum):
    UP = 0
    DOWN = 1
    HOLD = 2


Callback = Callable[[], Awaitable[None]]


class KeyConf(NamedTuple):
    direction: KeyDirection
    key: str
    callback: Callback
    skip_next_key: Optional[Tuple[KeyDirection, str]] = None


KeyConfHashTable = Dict[Tuple[KeyDirection, str], KeyConf]

_COMMAND_ID = 0

_SESSION: Optional[aiohttp.ClientSession] = None


def get_parser() -> argparse.ArgumentParser:
    global DEFAULT_DEVICE
    global MOPIDY_URL
    parser = argparse.ArgumentParser(description=__doc__, prog="argosir")

    parser.add_argument("--debug", action="store_true",
                        help="enable debug logs")

    d_help = "path of device to listen events for "
    d_help += f"(default: {DEFAULT_DEVICE!r})"
    parser.add_argument("-d", "--device", type=str, default=DEFAULT_DEVICE,
                        help=d_help)

    u_help = "URL of the Mopidy RPC-JSON API to act on "
    u_help += "(default: {MOPIDY_URL!r})"
    parser.add_argument("-u", "--url", type=str, default=MOPIDY_URL,
                        help=u_help)

    return parser


def configure_logger(args: argparse.Namespace):
    ch = logging.StreamHandler()
    formatter = logging.Formatter("%(levelname)s: %(message)s")
    ch.setFormatter(formatter)
    level = logging.DEBUG if args.debug is True else logging.INFO
    ch.setLevel(level)
    logger = logging.getLogger("argosir")
    logger.setLevel(level)
    logger.addHandler(ch)


async def send_command(method: str, *, params: dict = None) -> Any:
    """Send a command to Mopidy RPC-JSON HTTP interface."""
    global _COMMAND_ID
    global _SESSION
    if not _SESSION:
        raise RuntimeError("HTTP client session not found")

    _COMMAND_ID += 1
    data = {"jsonrpc": "2.0",
            "id": _COMMAND_ID,
            "method": method}
    if params is not None:
        data["params"] = params

    try:
        LOGGER.debug(f"Sending POST {MOPIDY_URL} {data}")
        async with _SESSION.post(MOPIDY_URL, json=data) as resp:
            content = await resp.json()
            LOGGER.debug(f"Received {content}")
            if "result" in content:
                return content["result"]
    except aiohttp.ClientError as err:
        LOGGER.error(f"Failed to request mopidy server, {err}")


async def next_track():
    await send_command("core.playback.next")


async def previous_track():
    await send_command("core.playback.previous")


async def scan_forward():
    current_time_pos = await send_command("core.playback.get_time_position")
    if current_time_pos is None:
        LOGGER.debug("Unknown time position")
        return
    try:
        target_time_pos = int(current_time_pos) + 1000
    except ValueError:
        LOGGER.debug(f"Failed to convert time position {current_time_pos}")
        return

    await send_command("core.playback.seek",
                       params={"time_position": target_time_pos})


async def scan_backward():
    current_time_pos = await send_command("core.playback.get_time_position")
    if current_time_pos is None:
        LOGGER.debug("Unknown time position")
        return
    try:
        target_time_pos = max(0, current_time_pos - 1000)
    except ValueError:
        LOGGER.debug(f"Failed to convert time position {current_time_pos}")
        return

    await send_command("core.playback.seek",
                       params={"time_position": target_time_pos})


async def pause_or_resume():
    state = await send_command("core.playback.get_state")
    if state == "playing":
        await send_command("core.playback.pause")
    elif state == "paused":
        await send_command("core.playback.resume")
    elif state == "stopped":
        await send_command("core.playback.play")
    else:
        LOGGER.error(f"Unexpected state, {state}")


async def play_favorite_playlist():
    """Enqueue tracks from favorite playlist, play first track.

    The favorite playlist is the first playlist with name
    ``FAVORITE_PLAYLIST_NAME``.

    """
    lists = await send_command("core.playlists.as_list")
    if lists is None:
        LOGGER.warning(f"No playlist found")
        return

    try:
        rf_list = next(filter(
            lambda l: l["name"] == FAVORITE_PLAYLIST_NAME, lists))
    except StopIteration:
        LOGGER.warning(f"{FAVORITE_PLAYLIST_NAME} playlist not found")
        return
    refs = await send_command("core.playlists.get_items",
                              params={"uri": rf_list["uri"]})
    await send_command("core.tracklist.clear")
    uris = [ref["uri"] for ref in refs]
    tltracks = await send_command("core.tracklist.add",
                                  params={"uris": uris,
                                          "at_position": 0})
    tltrack = tltracks[0]
    await send_command("core.playback.play",
                       params={"tlid": tltrack["tlid"]})


async def play_random_album():
    albums = await send_command("core.library.browse",
                                params={"uri": "local:directory?type=album"})
    if albums is None:
        LOGGER.warning(f"No album found")
        return

    LOGGER.info(f"Found {len(albums)} albums")
    album = random.choice(albums)
    LOGGER.info(f"Will play {album['name']}")
    await send_command("core.tracklist.clear")
    await send_command("core.tracklist.add", params={"uris": [album["uri"]]})
    await send_command("core.playback.play")


async def mute_unmute():
    mute = await send_command("core.mixer.get_mute")
    await send_command("core.mixer.set_mute", params={"mute": not mute})


async def volume_up():
    volume = await send_command("core.mixer.get_volume")
    new_volume = min(volume + VOLUME_STEP, 100)
    if new_volume != volume:
        await send_command("core.mixer.set_volume",
                           params={"volume": new_volume})


async def volume_down():
    volume = await send_command("core.mixer.get_volume")
    new_volume = max(volume - VOLUME_STEP, 0)
    if new_volume != volume:
        await send_command("core.mixer.set_volume",
                           params={"volume": new_volume})


# See rc_keymaps/smsl_a8 for mapped keys


KEY_CONF: List[KeyConf] \
    = [KeyConf(KeyDirection.UP, "KEY_RIGHT", next_track),
       KeyConf(KeyDirection.HOLD, "KEY_RIGHT", scan_forward,
               (KeyDirection.UP, "KEY_RIGHT")),

       KeyConf(KeyDirection.UP, "KEY_LEFT", previous_track),
       KeyConf(KeyDirection.HOLD, "KEY_LEFT", scan_backward,
               (KeyDirection.UP, "KEY_LEFT")),

       KeyConf(KeyDirection.UP, "KEY_ENTER", pause_or_resume),

       KeyConf(KeyDirection.DOWN, "KEY_MIN_INTERESTING", mute_unmute),

       KeyConf(KeyDirection.UP, "KEY_UP", volume_up),

       KeyConf(KeyDirection.HOLD, "KEY_UP", volume_up),

       KeyConf(KeyDirection.UP, "KEY_DOWN", volume_down),

       KeyConf(KeyDirection.HOLD, "KEY_DOWN", volume_down),

       KeyConf(KeyDirection.UP, "KEY_SELECT", play_random_album),

       KeyConf(KeyDirection.UP, "KEY_FN", play_favorite_playlist)]


def parse_key_conf() -> KeyConfHashTable:
    """Parse and index the key configurations.

    Key configurations are read from the global ``KEY_CONF``.

    """
    global KEY_CONF
    table: KeyConfHashTable = dict()
    for keyconf in KEY_CONF:
        key = (keyconf.direction.value, keyconf.key)
        table[key] = keyconf
        msg = f"{keyconf.key!r} {keyconf.direction} " \
            f"mapped to {keyconf.callback.__name__!r}"
        LOGGER.info(msg)
    return table


@contextlib.asynccontextmanager
async def get_session():
    global _SESSION
    try:
        if _SESSION is None or _SESSION.closed:
            LOGGER.debug(f"Starting a new HTTP session")
            _SESSION = aiohttp.ClientSession(raise_for_status=True)

        yield _SESSION
    except (ConnectionError, RuntimeError) as error:
        LOGGER.info(f"Not connected due to {error}")
        _SESSION = None

    finally:
        pass


async def consumer(dev: InputDevice, table: KeyConfHashTable):
    """Read kernel input events and try to translate to function calls.

    Args:
        dev: The device to pay attention to

        table: Mapping from key events to key configuration

    """
    global KEY_TO_SKIP
    async for ev in dev.async_read_loop():
        async with get_session():
            if ev.type == ecodes.EV_KEY:
                ev = categorize(ev)
                keys = [(ev.keystate, kc) for kc in ev.keycode] \
                    if isinstance(ev.keycode, list) \
                    else [(ev.keystate, ev.keycode)]

                for key in keys:
                    LOGGER.debug(f"Processing {key}")
                    if KEY_TO_SKIP:
                        if key == KEY_TO_SKIP:
                            LOGGER.debug(f"Deliberately skipping key event {key}")
                            KEY_TO_SKIP = None
                            continue

                    try:
                        keyconf = table[key]
                    except KeyError:
                        continue

                    callback = keyconf.callback
                    if not callback:
                        LOGGER.debug(f"Nothing to do for key event {key}")
                        continue

                    LOGGER.info(f"Calling {callback.__name__}")
                    await callback()
                    if keyconf.skip_next_key:
                        KEY_TO_SKIP = keyconf.skip_next_key
                        LOGGER.debug(f"Will skip next {KEY_TO_SKIP}")


if __name__ == "__main__":
    parser = get_parser()
    args = parser.parse_args()

    configure_logger(args)

    dev = InputDevice(args.device)
    LOGGER.info(f"Listening to {dev}...")
    LOGGER.debug(f"Device capabilities: {dev.capabilities(verbose=True)}...")

    keyconf_table = parse_key_conf()

    loop = asyncio.get_event_loop()
    loop.run_until_complete(consumer(dev, keyconf_table))
