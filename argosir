#!/usr/bin/env python3

"""Listen to kernel input events and translate to Mopidy commands.

"""

import argparse
import asyncio
import contextlib
from enum import IntEnum
import logging
import random
from typing import (
    Any,
    Awaitable,
    Callable,
    List,
    Dict,
    NamedTuple,
    Optional,
    Tuple,
    cast,
)

import aiohttp
from evdev import InputDevice, KeyEvent, categorize, ecodes
import yaml

LOGGER = logging.getLogger("argosir")


class KeyDirection(IntEnum):
    UP = 0
    DOWN = 1
    HOLD = 2

    @staticmethod
    def factory(raw: str) -> "KeyDirection":
        if raw == "UP":
            return KeyDirection.UP
        elif raw == "DOWN":
            return KeyDirection.DOWN
        elif raw == "HOLD":
            return KeyDirection.HOLD
        raise ValueError(f"{raw!r} is not a valid KeyDirection")


Callback = Callable[[], Awaitable[None]]


class KeyConf(NamedTuple):
    direction: KeyDirection
    key: str
    callback: Optional[Callback]
    skip_next_key: Optional[Tuple[KeyDirection, str]] = None


KeyConfHashTable = Dict[Tuple[KeyDirection, str], KeyConf]


class Config:
    device: str = "/dev/input/ir-recv"
    mopidy_url: str = "http://localhost:6680/mopidy/rpc"
    volume_step: int = 5
    favorite_stream_uri: str | None = None
    keys: List[KeyConf] = []


_CONFIG = Config()

_COMMAND_ID = 0

_SESSION: Optional[aiohttp.ClientSession] = None

_KEY_TO_SKIP = None


def get_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description=__doc__, prog="argosir")
    parser.add_argument("--debug", action="store_true", help="enable debug logs")
    parser.add_argument(
        "-c",
        "--config",
        type=str,
        help="path to configuration file",
        required=True,
    )

    return parser


def configure_logger(args: argparse.Namespace):
    ch = logging.StreamHandler()
    formatter = logging.Formatter("%(levelname)s: %(message)s")
    ch.setFormatter(formatter)
    level = logging.DEBUG if args.debug is True else logging.INFO
    ch.setLevel(level)
    logger = logging.getLogger("argosir")
    logger.setLevel(level)
    logger.addHandler(ch)


def parse_config(args: argparse.Namespace):
    global _CONFIG

    LOGGER.info(f"Reading config file {args.config!r}")
    try:
        with open(args.config) as st:
            config = yaml.safe_load(st)
    except FileNotFoundError:
        LOGGER.error(f"Missing file {args.config!r}")
        exit(1)

    if "device" in config:
        _CONFIG.device = config["device"]

    mopidy_config = config.get("mopidy", {})
    if "url" in mopidy_config:
        _CONFIG.mopidy_url = mopidy_config["url"]

    commands_config = config.get("commands", {})
    if "volume_step" in commands_config:
        _CONFIG.volume_step = commands_config["volume_step"]
    if "favorite_stream_uri" in commands_config:
        _CONFIG.favorite_stream_uri = commands_config["favorite_stream_uri"]

    raw_keys = config.get("keys", [])
    flatten_keys: List[Dict[str, Any]] = []
    for raw_key_conf in raw_keys:
        if isinstance(raw_key_conf, list):
            flatten_keys += raw_key_conf
        else:
            flatten_keys.append(raw_key_conf)

    for raw_key_conf in flatten_keys:
        raw_skip_next_key = raw_key_conf.get("skip_next_key")
        if raw_skip_next_key is not None:
            raw_key_conf.update(
                {
                    "skip_next_key": (
                        KeyDirection.factory(raw_skip_next_key[0]),
                        raw_skip_next_key[1],
                    )
                }
            )
        key_conf = KeyConf(
            direction=KeyDirection.factory(raw_key_conf["direction"]),
            key=raw_key_conf["key"],
            callback=_CALLBACKS[raw_key_conf["callback"]],
            skip_next_key=raw_skip_next_key,
        )
        _CONFIG.keys.append(key_conf)


async def send_command(method: str, *, params: Optional[Dict] = None) -> Any:
    """Send a command to Mopidy RPC-JSON HTTP interface."""
    global _COMMAND_ID
    global _CONFIG
    global _SESSION
    if not _SESSION:
        raise RuntimeError("HTTP client session not found")

    _COMMAND_ID += 1
    data = {"jsonrpc": "2.0", "id": _COMMAND_ID, "method": method}
    if params is not None:
        data["params"] = params

    mopidy_url = _CONFIG.mopidy_url

    try:
        LOGGER.debug(f"Sending POST {mopidy_url} {data}")
        async with _SESSION.post(mopidy_url, json=data) as resp:
            content = await resp.json()
            LOGGER.debug(f"Received {content}")
            if "result" in content:
                return content["result"]
    except aiohttp.ClientError as err:
        LOGGER.error(f"Failed to request mopidy server, {err}")


async def next_track():
    await send_command("core.playback.next")


async def previous_track():
    await send_command("core.playback.previous")


async def scan_forward():
    current_time_pos = await send_command("core.playback.get_time_position")
    if current_time_pos is None:
        LOGGER.debug("Unknown time position")
        return
    try:
        target_time_pos = int(current_time_pos) + 1000
    except ValueError:
        LOGGER.debug(f"Failed to convert time position {current_time_pos}")
        return

    await send_command("core.playback.seek", params={"time_position": target_time_pos})


async def scan_backward():
    current_time_pos = await send_command("core.playback.get_time_position")
    if current_time_pos is None:
        LOGGER.debug("Unknown time position")
        return
    try:
        target_time_pos = max(0, current_time_pos - 1000)
    except ValueError:
        LOGGER.debug(f"Failed to convert time position {current_time_pos}")
        return

    await send_command("core.playback.seek", params={"time_position": target_time_pos})


async def pause_or_resume():
    state = await send_command("core.playback.get_state")
    if state == "playing":
        await send_command("core.playback.pause")
    elif state == "paused":
        await send_command("core.playback.resume")
    elif state == "stopped":
        await send_command("core.playback.play")
    else:
        LOGGER.error(f"Unexpected state, {state}")


async def play_favorite_stream():
    """Enqueue favorite stream.

    The favorite stream is the stream with URI
    ``FAVORITE_STREAM_URI``.

    """
    global _CONFIG

    favorite_stream_uri = _CONFIG.favorite_stream_uri

    if favorite_stream_uri is None:
        LOGGER.debug("Favorite stream URI not configured")
        return

    uris = [favorite_stream_uri]
    tltracks = await send_command(
        "core.tracklist.add", params={"uris": uris, "at_position": 0}
    )
    tltrack = tltracks[0]
    await send_command("core.playback.play", params={"tlid": tltrack["tlid"]})


async def play_random_album():
    albums = await send_command(
        "core.library.browse", params={"uri": "local:directory?type=album"}
    )
    if albums is None:
        LOGGER.warning("No album found")
        return

    LOGGER.info(f"Found {len(albums)} albums")
    album = random.choice(albums)
    LOGGER.info(f"Will play {album['name']}")
    await send_command("core.tracklist.clear")
    await send_command("core.tracklist.add", params={"uris": [album["uri"]]})
    await send_command("core.playback.play")


async def mute_unmute():
    mute = await send_command("core.mixer.get_mute")
    await send_command("core.mixer.set_mute", params={"mute": not mute})


async def volume_up():
    global _CONFIG
    volume = await send_command("core.mixer.get_volume")
    new_volume = min(volume + _CONFIG.volume_step, 100)
    if new_volume != volume:
        await send_command("core.mixer.set_volume", params={"volume": new_volume})


async def volume_down():
    global _CONFIG
    volume = await send_command("core.mixer.get_volume")
    new_volume = max(volume - _CONFIG.volume_step, 0)
    if new_volume != volume:
        await send_command("core.mixer.set_volume", params={"volume": new_volume})


def parse_key_conf() -> KeyConfHashTable:
    """Parse and index the key configurations.

    Key configurations are read from the global ``KEY_CONF``.

    """
    global _CONFIG

    keys = _CONFIG.keys

    table: KeyConfHashTable = dict()
    for keyconf in keys:
        key = (KeyDirection(keyconf.direction.value), keyconf.key)
        table[key] = keyconf
        callback = keyconf.callback
        if callback is not None:
            msg = (
                f"{keyconf.key!r} {keyconf.direction} "
                f"mapped to {callback.__name__!r}"
            )
        else:
            msg = f"{keyconf.key!r} {keyconf.direction} not mapped"

        LOGGER.info(msg)
    return table


@contextlib.asynccontextmanager
async def get_session():
    global _SESSION
    try:
        if _SESSION is None or _SESSION.closed:
            LOGGER.debug("Starting a new HTTP session")
            _SESSION = aiohttp.ClientSession(raise_for_status=True)

        yield _SESSION
    except (ConnectionError, RuntimeError) as error:
        LOGGER.info(f"Not connected due to {error}")
        _SESSION = None

    finally:
        pass


async def consumer(dev: InputDevice, table: KeyConfHashTable):
    """Read kernel input events and try to translate to function calls.

    Args:
        dev: The device to pay attention to

        table: Mapping from key events to key configuration

    """
    global _KEY_TO_SKIP
    async for ev in dev.async_read_loop():
        async with get_session():
            if ev.type == ecodes.EV_KEY:
                key_ev = categorize(ev)
                assert isinstance(key_ev, KeyEvent)
                keys = (
                    [(KeyDirection(key_ev.keystate), kc) for kc in key_ev.keycode]
                    if isinstance(key_ev.keycode, list)
                    else [(KeyDirection(key_ev.keystate), cast(str, key_ev.keycode))]
                )

                for key in keys:
                    LOGGER.debug(f"Processing {key}")
                    if _KEY_TO_SKIP:
                        if key == _KEY_TO_SKIP:
                            LOGGER.debug(f"Deliberately skipping key event {key}")
                            _KEY_TO_SKIP = None
                            continue

                    try:
                        keyconf = table[key]
                    except KeyError:
                        continue

                    callback = keyconf.callback
                    if callback is None:
                        LOGGER.debug(f"Nothing to do for key event {key}")
                        continue

                    LOGGER.info(f"Calling {callback.__name__}")
                    await callback()
                    if keyconf.skip_next_key:
                        _KEY_TO_SKIP = keyconf.skip_next_key
                        LOGGER.debug(f"Will skip next {_KEY_TO_SKIP}")


_CALLBACKS: Dict[str, Callback] = {
    "next_track": next_track,
    "previous_track": previous_track,
    "scan_forward": scan_forward,
    "scan_backward": scan_backward,
    "pause_or_resume": pause_or_resume,
    "play_favorite_stream": play_favorite_stream,
    "play_random_album": play_random_album,
    "mute_unmute": mute_unmute,
    "volume_up": volume_up,
    "volume_down": volume_down,
}


if __name__ == "__main__":
    parser = get_parser()
    args = parser.parse_args()

    configure_logger(args)

    parse_config(args)

    dev = InputDevice(_CONFIG.device)
    LOGGER.info(f"Listening to {dev}...")
    LOGGER.debug(f"Device capabilities: {dev.capabilities(verbose=True)}...")

    keyconf_table = parse_key_conf()

    loop = asyncio.get_event_loop()
    loop.run_until_complete(consumer(dev, keyconf_table))
